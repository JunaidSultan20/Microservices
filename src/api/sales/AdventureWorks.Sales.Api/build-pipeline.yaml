#Sales.Api Build Pipeline
 
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/api/sales/AdventureWorks.Sales.Api/**
      - src/common/AdventureWorks.Common/**
      - src/common/AdventureWorks.Messaging/**
      - src/common/AdventureWorks.Contracts/**
      - src/common/AdventureWorks.Events/**
      - src/common/AdventureWorks.Middlewares/**
      - src/services/sales/AdventureWorks.Sales.Customers/**
      - src/services/sales/AdventureWorks.Sales.Domain/**
      - src/services/sales/AdventureWorks.Sales.Infrastructure/**
      - test/api/sales/AdventureWorks.Sales.Api.Test/**
      - test/common/AdventureWorks.Common.Test/**
      - test/common/AdventureWorks.Messaging.Test/**
      - test/common/AdventureWorks.Contracts.Test/**
      - test/common/AdventureWorks.Events.Test/**
      - test/common/AdventureWorks.Middlewares.Test/**
    exclude:
      - src/api/sales/AdventureWorks.Sales.Api/pipeline/version.txt

pr:
  branches:
    include:
      - main
    exclude:
      - src/api/sales/AdventureWorks.Sales.Api/pipeline/version.txt

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 1
  minor: 0
  patch: 0
  version: '$(major).$(minor).$(patch)'
  versionFile: 'version.txt'
  commitMessage: '[skip ci] Update version to'

stages:
- stage: Build
  displayName: Build and Test
  
  jobs:
  - job: Build
    displayName: Build Job
    
    pool:
      vmImage: 'windows-latest'
    
    steps:
      - checkout: self
        displayName: 'Checkout Code'

      # Read the current version from version.txt
      - powershell: |
          $version = Get-Content $(versionFile)
          Write-Output "##vso[task.setvariable variable=version]$version"
          displayName: 'Read Version'

      # Increment the minor version
      - powershell: |
          $version = "$(version)"
          $parts = $version -split '\.'
          $major = [int]$parts[0]
          $minor = [int]$parts[1] + 1
          $patch = [int]$parts[2]
          $newVersion = "$major.$minor.$patch"
          Set-Content -Path $(versionFile) -Value $newVersion
          Write-Output "##vso[task.setvariable variable=newVersion]$newVersion"
        displayName: 'Increment Minor Version'

      # Commit the updated version.txt back to the repository
      - checkout: self
        persistCredentials: true
      
      - script: |  
          git config --global user.email "junaid.sultan20@outlook.com"
          git config --global user.name "Junaid Sultan"
          git add $(versionFile)
          git commit -m "$(commitMessage) $(newVersion)"
          git push
        displayName: 'Commit Updated Version'

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: DotNetCoreCLI@2
        displayName: Restore Nuget Packages
        inputs:
          command: 'restore'
          projects: |
            src/api/sales/AdventureWorks.Sales.Api/AdventureWorks.Sales.Api.csproj            
            src/common/AdventureWorks.Common/AdventureWorks.Common.csproj
            src/common/AdventureWorks.Contracts/AdventureWorks.Contracts.csproj
            src/common/AdventureWorks.Events/AdventureWorks.Events.csproj
            src/common/AdventureWorks.Messaging/AdventureWorks.Messaging.csproj
            src/common/AdventureWorks.Middlewares/AdventureWorks.Middlewares.csproj
            src/services/sales/AdventureWorks.Sales.Customers/AdventureWorks.Sales.Customers.csproj
            src/services/sales/AdventureWorks.Sales.Domain/AdventureWorks.Sales.Domain.csproj
            src/services/sales/AdventureWorks.Sales.Infrastructure/AdventureWorks.Sales.Infrastructure.csproj
            

      - task: DotNetCoreCLI@2
        displayName: 'Build Sales Service'
        inputs:
          command: 'build'
          projects: 'src/api/sales/AdventureWorks.Sales.Api/AdventureWorks.Sales.Api.csproj'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Test'
        inputs:
          command: 'test'
          projects: |
            test/api/sales/AdventureWorks.Sales.Api.Test.csproj
            test/common/AdventureWorks.Common.Test.csproj
            test/common/AdventureWorks.Events.Test.csproj
            test/common/AdventureWorks.Middlewares.Test.csproj
          arguments: '--configuration Release --no-build --verbosity normal'

- stage: Publish
  displayName: Publish Docker Image
  
  jobs:
    - job: PublishDocker
      displayName: Build and Publish Docker Image
      
      pool:
        vmImage: 'ubuntu-latest'
      
      steps:
        - task: Docker@2
          displayName: 'Build Docker Image'
          inputs:
            command: 'build'
            containerRegistry: 'Docker Hub Connection'  # Use your service connection name
            repository: 'junaidsultan20/microservices-sales-api'
            dockerfile: 'src/api/sales/AdventureWorks.Sales.Api/Dockerfile'
            buildContext: '$(Build.SourcesDirectory)'
            tags: |
                $(version)
                latest


        - task: Docker@2
          displayName: 'Push Docker Image'
          inputs:
            command: 'push'
            containerRegistry: 'Docker Hub Connection'  # Use your service connection name
            repository: 'junaidsultan20/microservices-sales-api'
            tags: | 
                $(version)
                latest
