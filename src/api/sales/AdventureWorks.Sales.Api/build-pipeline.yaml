#Sales.Api Build Pipeline
 
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/api/sales/AdventureWorks.Sales.Api/**
      - src/common/AdventureWorks.Common/**
      - src/common/AdventureWorks.Messaging/**
      - src/common/AdventureWorks.Contracts/**
      - src/common/AdventureWorks.Events/**
      - src/common/AdventureWorks.Middlewares/**
      - src/services/sales/AdventureWorks.Sales.Customers/**
      - src/services/sales/AdventureWorks.Sales.Domain/**
      - src/services/sales/AdventureWorks.Sales.Infrastructure/**
      - test/api/sales/AdventureWorks.Sales.Api.Test/**
      - test/common/AdventureWorks.Common.Test/**
      - test/common/AdventureWorks.Messaging.Test/**
      - test/common/AdventureWorks.Contracts.Test/**
      - test/common/AdventureWorks.Events.Test/**
      - test/common/AdventureWorks.Middlewares.Test/**

pr:
  branches:
    include:
      - main

variables:
  - group: SalesApiVariableGroup
  - name: my-passed-variables
    value: $[variables.minor]

stages:
- stage: Build
  displayName: Build and Test
  
  jobs:
  - job: Build
    displayName: Build Job
    
    pool:
      vmImage: 'windows-latest'
    
    steps:
      - script: echo $(myhello) # uses macro syntax
      - script: echo $(my-passed-variable)
      
      - task: PowerShell@2
        displayName: 'Log version variables'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Minor version: $env:minor"

      - task: PowerShell@2
        displayName: 'List all environment variables'
        inputs:
          targetType: 'inline'
          script: |
            Get-ChildItem Env:

      - checkout: self
        displayName: 'Checkout Code'

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: DotNetCoreCLI@2
        displayName: Restore Nuget Packages
        inputs:
          command: 'restore'
          projects: |
            src/api/sales/AdventureWorks.Sales.Api/AdventureWorks.Sales.Api.csproj
            src/common/AdventureWorks.Common/AdventureWorks.Common.csproj
            src/common/AdventureWorks.Contracts/AdventureWorks.Contracts.csproj
            src/common/AdventureWorks.Events/AdventureWorks.Events.csproj
            src/common/AdventureWorks.Messaging/AdventureWorks.Messaging.csproj
            src/common/AdventureWorks.Middlewares/AdventureWorks.Middlewares.csproj
            src/services/sales/AdventureWorks.Sales.Customers/AdventureWorks.Sales.Customers.csproj
            src/services/sales/AdventureWorks.Sales.Domain/AdventureWorks.Sales.Domain.csproj
            src/services/sales/AdventureWorks.Sales.Infrastructure/AdventureWorks.Sales.Infrastructure.csproj

      - task: DotNetCoreCLI@2
        displayName: 'Build Sales Service'
        inputs:
          command: 'build'
          projects: 'src/api/sales/AdventureWorks.Sales.Api/AdventureWorks.Sales.Api.csproj'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Test'
        inputs:
          command: 'test'
          projects: |
            test/api/sales/AdventureWorks.Sales.Api.Test.csproj
            test/common/AdventureWorks.Common.Test.csproj
            test/common/AdventureWorks.Events.Test.csproj
            test/common/AdventureWorks.Middlewares.Test.csproj
          arguments: '--configuration Release --no-build --verbosity normal'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: | 
              test/api/sales/AdventureWorks.Sales.Api.Test/*.trx
              test/common/AdventureWorks.Common.Test/*.trx
              test/common/AdventureWorks.Events.Test/*.trx
              test/common/AdventureWorks.Middlewares.Test/*.trx
          mergeTestResults: true
          failTaskOnFailedTests: true

      - task: Bash@3
        displayName: 'Update variable group'
        inputs:
          targetType: 'inline'
          script: |
            # Define variables
            new_minor=1
            token=$(System.AccessToken)

            # Update the variable group using REST API
            curl -X PATCH \
                 -H "Content-Type: application/json" \
                 -H "Authorization: Bearer $token" \
                 --data '{"variables": {"minor_variable": {"value": "'$new_minor'"}}}' \
                 https://dev.azure.com/junaidsultan200282/Microservices/_apis/distributedtask/variablegroups/3?api-version=7.0
        env:
          System.AccessToken: $(System.AccessToken)

- stage: Publish
  displayName: Publish Docker Image
  
  jobs:
    - job: PublishDocker
      displayName: Build and Publish Docker Image
      
      pool:
        vmImage: 'ubuntu-latest'
      
      steps:
        - task: Docker@2
          displayName: 'Build Docker Image'
          inputs:
            command: 'build'
            containerRegistry: 'Docker Hub Connection'
            repository: 'junaidsultan20/microservices-sales-api'
            dockerfile: 'src/api/sales/AdventureWorks.Sales.Api/Dockerfile'
            buildContext: '$(Build.SourcesDirectory)'
            tags: |
                '$(major).$(minor).$(patch)'
                latest

        - task: Docker@2
          displayName: 'Push Docker Image'
          inputs:
            command: 'push'
            containerRegistry: 'Docker Hub Connection'
            repository: 'junaidsultan20/microservices-sales-api'
            tags: | 
                '$(major).$(minor).$(patch)'
                latest